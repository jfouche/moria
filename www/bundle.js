(()=>{"use strict";class e{constructor(e,t){this._x=e,this._y=t,this._life=100}get x(){return this._x}get y(){return this._y}get life(){return this._life}moveTo(e,t){this._x=e,this._y=t}move(e){let t=0,i=0;switch(e){case 0:i=-1;break;case 1:i=1;break;case 2:t=-1;break;case 3:t=1}this._x+=t,this._y+=i,this._life--}}class t{constructor(e,t){this.nRows=e,this.nCols=t,this.height=e*l.cellWidth+1,this.width=t*l.cellWidth+1,this.grid=[];for(var i=0;i<this.nRows;i++){this.grid[i]=[];for(var s=0;s<this.nCols;s++)this.grid[i][s]=new l(i,s)}this.upstair=r.upstair(0,0),this.downstair=r.downstairstair(e-1,t-1)}cell(e,t){return this.grid[e][t]}}class i{newMaze(e,i){let s=new t(e,i),l=[],r=s.cell(0,0);r.visited=!0;let o=!1;for(;!o;){let e=this.getNextNeighbor(s,r);e?(e.visited=!0,l.push(r),this.removeWallsBetween(r,e),r=e):l.length>0?(e=l.pop(),r=e):(console.log("FINISH"),o=!0)}for(var h=0;h<e;h++)for(var c=0;c<i;c++)s.cell(h,c).visited=!1;return this.removeRandomWalls(s,10),s}getNextNeighbor(e,t){let i,s=[];if(t.row>0){let i=e.cell(t.row-1,t.col);i.visited||s.push(i)}if(t.row<e.nRows-1){let i=e.cell(t.row+1,t.col);i.visited||s.push(i)}if(t.col>0){let i=e.cell(t.row,t.col-1);i.visited||s.push(i)}if(t.col<e.nCols-1){let i=e.cell(t.row,t.col+1);i.visited||s.push(i)}return s.length>0&&(i=s[o(0,s.length)]),i}removeWallsBetween(e,t){e.col>t.col?(e.borders.left=!1,t.borders.right=!1):e.col<t.col?(e.borders.right=!1,t.borders.left=!1):e.row>t.row?(e.borders.top=!1,t.borders.bottom=!1):e.row<t.row&&(e.borders.bottom=!1,t.borders.top=!1)}removeRandomWalls(e,t){for(let i=0;i<t;){let t=o(1,e.nRows-2),s=o(1,e.nCols-2),l=e.cell(t,s);switch(o(0,3)){case 0:l.borders.top&&(this.removeWallsBetween(l,e.cell(t-1,s)),console.log("remove (%d, %d) : top",s,t),i++);break;case 1:l.borders.right&&(this.removeWallsBetween(l,e.cell(t,s+1)),console.log("remove (%d, %d) : right",s,t),i++);break;case 2:l.borders.bottom&&(this.removeWallsBetween(l,e.cell(t+1,s)),console.log("remove (%d, %d) : bottom",s,t),i++);break;case 3:l.borders.left&&(this.removeWallsBetween(l,e.cell(t,s-1)),console.log("remove (%d, %d) : left",s,t),i++)}}}}class s{constructor(){this.top=!0,this.right=!0,this.bottom=!0,this.left=!0}}class l{constructor(e,t){this.visited=!1,this.row=e,this.col=t,this.borders=new s}}l.cellWidth=30;class r{constructor(e,t,i){this.row=e,this.col=t,this.up=i}static upstair(e,t){return new r(e,t,!0)}static downstairstair(e,t){return new r(e,t,!1)}}function o(e,t){return Math.floor(e+Math.random()*(t-e+1))}class h{constructor(t,s,l){this.nRows=t,this.nCols=s;let r=new i;this.mazes=[];for(let e=0;e<l;e++)this.mazes.push(r.newMaze(this.nRows,this.nCols));this.currentLevel=0;let o=this.maze();this.hero=new e(o.upstair.col,o.upstair.row),this.width=o.width,this.height=o.height,this.initLevel()}getLevel(){return this.currentLevel}initLevel(){let e=this.maze();this.hero.moveTo(e.upstair.col,e.upstair.row),e.cell(this.hero.y,this.hero.x).visited=!0,this.checkVisibility()}maze(){return this.mazes[this.currentLevel]}moveHero(e){this.canMove(e)&&(this.hero.move(e),this.maze().cell(this.hero.y,this.hero.x).visited=!0,this.hero.x===this.maze().downstair.col&&this.hero.y===this.maze().downstair.row&&(this.currentLevel++,this.initLevel()),this.checkVisibility())}canMove(e){let t=this.maze().cell(this.hero.y,this.hero.x).borders;return 3===e&&!t.right||2===e&&!t.left||0===e&&!t.top||1===e&&!t.bottom}checkVisibility(){let e,t,i,s=this.maze(),l=()=>{e=this.hero.x,t=this.hero.y,i=s.cell(t,e)},r=()=>{i=s.cell(t,e),i.visited=!0};for(l();!i.borders.top;)t-=1,r();for(l();!i.borders.right;)e+=1,r();for(l();!i.borders.bottom;)t+=1,r();for(l();!i.borders.left;)e-=1,r()}getHero(){return this.hero}}class c{constructor(e){this.maze=e}draw(e){for(let t=0;t<this.maze.nRows;t++)for(let i=0;i<this.maze.nCols;i++){let s=this.maze.cell(t,i);s.visited&&new n(s).draw(e)}this.maze.cell(this.maze.upstair.row,this.maze.upstair.col).visited&&new a(this.maze.upstair).draw(e),this.maze.cell(this.maze.downstair.row,this.maze.downstair.col).visited&&new a(this.maze.downstair).draw(e)}}class n{constructor(e){this.cell=e}draw(e){let t=l.cellWidth,i=this.cell.col*l.cellWidth,s=this.cell.row*l.cellWidth;e.noStroke(),e.fill(25,25,25),e.rect(i,s,t,t),e.stroke(255),e.noFill(),e.line(i,s,i,s+4),e.line(i+t,s,i+t,s+4),e.line(i+t,s,i+t-4,s),e.line(i+t,s+t,i+t-4,s+t),e.line(i+t,s+t,i+t,s+t-4),e.line(i,s+t,i,s+t-4),e.line(i,s+t,i+4,s+t),e.line(i,s,i+4,s),this.cell.borders.top&&e.line(i,s,i+t,s),this.cell.borders.right&&e.line(i+t,s,i+t,s+t),this.cell.borders.bottom&&e.line(i+t,s+t,i,s+t),this.cell.borders.left&&e.line(i,s+t,i,s)}highlight(e){e.noStroke(),e.fill(255,255,255,255);let t=l.cellWidth,i=this.cell.col*l.cellWidth,s=this.cell.row*l.cellWidth;e.ellipse(i+t/2,s+t/2,t/2,t/2)}}n.cellWidth=30;class a{constructor(e){this.stair=e}draw(e){e.stroke(255),this.stair.up?e.fill(192,192,192):e.fill(70,70,70);let t=l.cellWidth-6,i=this.stair.col*l.cellWidth+3,s=this.stair.row*l.cellWidth+3;e.rect(i,s,t,t)}}class d{constructor(e){this.game=e}draw(e){e.background(0),new c(this.game.maze()).draw(e);let t=this.game.getHero();new w(t).draw(e),document.getElementById("nLevel").innerHTML=this.game.getLevel().toString(),document.getElementById("life").innerHTML=t.life.toString()}}class w{constructor(e){this.hero=e}draw(e){e.stroke(255),this.hero.life>0?e.fill(0,255,0):e.fill(80,0,0);let t=this.hero.x*l.cellWidth+l.cellWidth/2,i=this.hero.y*l.cellWidth+l.cellWidth/2,s=l.cellWidth/2-1;e.ellipse(t,i,s,s)}}let m;new p5((function(e){e.setup=function(){m=new h(8,10,5),e.createCanvas(m.width,m.height).parent("game"),e.frameRate(10)},e.draw=function(){e.background(0),new d(m).draw(e),document.getElementById("nLevel").innerHTML=m.getLevel().toString()},e.keyPressed=function(){m.getHero().life<=0||(e.keyCode===e.UP_ARROW?m.moveHero(0):e.keyCode===e.DOWN_ARROW?m.moveHero(1):e.keyCode===e.LEFT_ARROW?m.moveHero(2):e.keyCode===e.RIGHT_ARROW&&m.moveHero(3))}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,